// Mocks generated by Mockito 5.4.6 from annotations
// in trailrun_app/test/data/services/photo_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i9;

import 'package:camera/camera.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:trailrun_app/data/services/camera_service.dart' as _i6;
import 'package:trailrun_app/domain/models/photo.dart' as _i2;
import 'package:trailrun_app/domain/repositories/photo_repository.dart' as _i3;
import 'package:trailrun_app/domain/value_objects/coordinates.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePhoto_0 extends _i1.SmartFake implements _i2.Photo {
  _FakePhoto_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePhotoStorageStats_1 extends _i1.SmartFake
    implements _i3.PhotoStorageStats {
  _FakePhotoStorageStats_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PhotoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoRepository extends _i1.Mock implements _i3.PhotoRepository {
  MockPhotoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Photo> createPhoto(_i2.Photo? photo) => (super.noSuchMethod(
        Invocation.method(
          #createPhoto,
          [photo],
        ),
        returnValue: _i4.Future<_i2.Photo>.value(_FakePhoto_0(
          this,
          Invocation.method(
            #createPhoto,
            [photo],
          ),
        )),
      ) as _i4.Future<_i2.Photo>);

  @override
  _i4.Future<_i2.Photo> updatePhoto(_i2.Photo? photo) => (super.noSuchMethod(
        Invocation.method(
          #updatePhoto,
          [photo],
        ),
        returnValue: _i4.Future<_i2.Photo>.value(_FakePhoto_0(
          this,
          Invocation.method(
            #updatePhoto,
            [photo],
          ),
        )),
      ) as _i4.Future<_i2.Photo>);

  @override
  _i4.Future<_i2.Photo?> getPhoto(String? photoId) => (super.noSuchMethod(
        Invocation.method(
          #getPhoto,
          [photoId],
        ),
        returnValue: _i4.Future<_i2.Photo?>.value(),
      ) as _i4.Future<_i2.Photo?>);

  @override
  _i4.Future<List<_i2.Photo>> getPhotosForActivity(String? activityId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPhotosForActivity,
          [activityId],
        ),
        returnValue: _i4.Future<List<_i2.Photo>>.value(<_i2.Photo>[]),
      ) as _i4.Future<List<_i2.Photo>>);

  @override
  _i4.Future<List<_i2.Photo>> getPhotosSortedByTime(String? activityId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPhotosSortedByTime,
          [activityId],
        ),
        returnValue: _i4.Future<List<_i2.Photo>>.value(<_i2.Photo>[]),
      ) as _i4.Future<List<_i2.Photo>>);

  @override
  _i4.Future<List<_i2.Photo>> getCoverCandidates(
    String? activityId, {
    double? minScore = 0.7,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCoverCandidates,
          [activityId],
          {#minScore: minScore},
        ),
        returnValue: _i4.Future<List<_i2.Photo>>.value(<_i2.Photo>[]),
      ) as _i4.Future<List<_i2.Photo>>);

  @override
  _i4.Future<void> deletePhoto(String? photoId) => (super.noSuchMethod(
        Invocation.method(
          #deletePhoto,
          [photoId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deletePhotosForActivity(String? activityId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deletePhotosForActivity,
          [activityId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<List<_i2.Photo>> watchPhotosForActivity(String? activityId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchPhotosForActivity,
          [activityId],
        ),
        returnValue: _i4.Stream<List<_i2.Photo>>.empty(),
      ) as _i4.Stream<List<_i2.Photo>>);

  @override
  _i4.Future<String> savePhotoFile(
    String? activityId,
    List<int>? imageBytes,
    String? extension,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #savePhotoFile,
          [
            activityId,
            imageBytes,
            extension,
          ],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #savePhotoFile,
            [
              activityId,
              imageBytes,
              extension,
            ],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> generateThumbnail(
    String? photoPath, {
    int? maxWidth = 300,
    int? maxHeight = 300,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateThumbnail,
          [photoPath],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
          },
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #generateThumbnail,
            [photoPath],
            {
              #maxWidth: maxWidth,
              #maxHeight: maxHeight,
            },
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<void> deletePhotoFile(String? filePath) => (super.noSuchMethod(
        Invocation.method(
          #deletePhotoFile,
          [filePath],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<int>?> getPhotoBytes(String? filePath) => (super.noSuchMethod(
        Invocation.method(
          #getPhotoBytes,
          [filePath],
        ),
        returnValue: _i4.Future<List<int>?>.value(),
      ) as _i4.Future<List<int>?>);

  @override
  _i4.Future<bool> photoFileExists(String? filePath) => (super.noSuchMethod(
        Invocation.method(
          #photoFileExists,
          [filePath],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<List<_i2.Photo>> getPhotosNeedingSync() => (super.noSuchMethod(
        Invocation.method(
          #getPhotosNeedingSync,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Photo>>.value(<_i2.Photo>[]),
      ) as _i4.Future<List<_i2.Photo>>);

  @override
  _i4.Future<void> markPhotoSynced(String? photoId) => (super.noSuchMethod(
        Invocation.method(
          #markPhotoSynced,
          [photoId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> markPhotoSyncFailed(
    String? photoId,
    String? error,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markPhotoSyncFailed,
          [
            photoId,
            error,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateCurationScore(
    String? photoId,
    double? score,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCurationScore,
          [
            photoId,
            score,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> stripExifData(String? photoId) => (super.noSuchMethod(
        Invocation.method(
          #stripExifData,
          [photoId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i3.PhotoStorageStats> getStorageStats() => (super.noSuchMethod(
        Invocation.method(
          #getStorageStats,
          [],
        ),
        returnValue:
            _i4.Future<_i3.PhotoStorageStats>.value(_FakePhotoStorageStats_1(
          this,
          Invocation.method(
            #getStorageStats,
            [],
          ),
        )),
      ) as _i4.Future<_i3.PhotoStorageStats>);

  @override
  _i4.Future<int> cleanupOrphanedFiles() => (super.noSuchMethod(
        Invocation.method(
          #cleanupOrphanedFiles,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}

/// A class which mocks [CameraService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCameraService extends _i1.Mock implements _i6.CameraService {
  MockCameraService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  bool get isCapturing => (super.noSuchMethod(
        Invocation.getter(#isCapturing),
        returnValue: false,
      ) as bool);

  @override
  _i7.FlashMode get flashMode => (super.noSuchMethod(
        Invocation.getter(#flashMode),
        returnValue: _i7.FlashMode.off,
      ) as _i7.FlashMode);

  @override
  double get zoomLevel => (super.noSuchMethod(
        Invocation.getter(#zoomLevel),
        returnValue: 0.0,
      ) as double);

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> switchCamera(_i7.CameraDescription? camera) =>
      (super.noSuchMethod(
        Invocation.method(
          #switchCamera,
          [camera],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.Photo> capturePhotoForActivity({
    required String? activityId,
    _i8.Coordinates? currentLocation,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #capturePhotoForActivity,
          [],
          {
            #activityId: activityId,
            #currentLocation: currentLocation,
          },
        ),
        returnValue: _i4.Future<_i2.Photo>.value(_FakePhoto_0(
          this,
          Invocation.method(
            #capturePhotoForActivity,
            [],
            {
              #activityId: activityId,
              #currentLocation: currentLocation,
            },
          ),
        )),
      ) as _i4.Future<_i2.Photo>);

  @override
  _i4.Future<void> startPreview() => (super.noSuchMethod(
        Invocation.method(
          #startPreview,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> stopPreview() => (super.noSuchMethod(
        Invocation.method(
          #stopPreview,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setFlashMode(_i7.FlashMode? mode) => (super.noSuchMethod(
        Invocation.method(
          #setFlashMode,
          [mode],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setExposureMode(_i7.ExposureMode? mode) =>
      (super.noSuchMethod(
        Invocation.method(
          #setExposureMode,
          [mode],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setFocusMode(_i7.FocusMode? mode) => (super.noSuchMethod(
        Invocation.method(
          #setFocusMode,
          [mode],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setFocusPoint(_i9.Offset? point) => (super.noSuchMethod(
        Invocation.method(
          #setFocusPoint,
          [point],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setExposurePoint(_i9.Offset? point) => (super.noSuchMethod(
        Invocation.method(
          #setExposurePoint,
          [point],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setZoomLevel(double? zoom) => (super.noSuchMethod(
        Invocation.method(
          #setZoomLevel,
          [zoom],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> resume() => (super.noSuchMethod(
        Invocation.method(
          #resume,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
